<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PrintingHouse.Infrastructure</name>
    </assembly>
    <members>
        <member name="T:PrintingHouse.Infrastructure.Constants.DataConstants">
            <summary>
            Models constants
            </summary>
        </member>
        <member name="T:PrintingHouse.Infrastructure.Constants.DataConstants.Article">
            <summary>
            Article model constants
            </summary>
        </member>
        <member name="F:PrintingHouse.Infrastructure.Constants.DataConstants.Article.MaxNameLenght">
            <summary>
            Article name maximum lenght
            </summary>
        </member>
        <member name="F:PrintingHouse.Infrastructure.Constants.DataConstants.Article.MinNameLenght">
            <summary>
            Article name minimum lenght
            </summary>
        </member>
        <member name="T:PrintingHouse.Infrastructure.Constants.DataConstants.Client">
            <summary>
            Client model constants
            </summary>
        </member>
        <member name="F:PrintingHouse.Infrastructure.Constants.DataConstants.Client.MaxNameLenght">
            <summary>
            Client name maximum lenght
            </summary>
        </member>
        <member name="F:PrintingHouse.Infrastructure.Constants.DataConstants.Client.MinNameLenght">
            <summary>
            Client name minimum lenght
            </summary>
        </member>
        <member name="F:PrintingHouse.Infrastructure.Constants.DataConstants.Client.MaxEmailLenght">
            <summary>
            Client e-mail maximum lenght
            </summary>
        </member>
        <member name="F:PrintingHouse.Infrastructure.Constants.DataConstants.Client.MinEmailLenght">
            <summary>
            Client e-mail minimum lenght
            </summary>
        </member>
        <member name="T:PrintingHouse.Infrastructure.Constants.DataConstants.Order">
            <summary>
            Order model constants
            </summary>
        </member>
        <member name="F:PrintingHouse.Infrastructure.Constants.DataConstants.Order.MaxCommentLenght">
            <summary>
            Order comment maximum lenght
            </summary>
        </member>
        <member name="T:PrintingHouse.Infrastructure.Constants.DataConstants.Machine">
            <summary>
            Printing machine model constants
            </summary>
        </member>
        <member name="F:PrintingHouse.Infrastructure.Constants.DataConstants.Machine.MaxNameLenght">
            <summary>
            Machine name maximum lenght
            </summary>
        </member>
        <member name="F:PrintingHouse.Infrastructure.Constants.DataConstants.Machine.MinNameLenght">
            <summary>
            Machine name minimum lenght
            </summary>
        </member>
        <member name="T:PrintingHouse.Infrastructure.Constants.DataConstants.Employee">
            <summary>
            Employee model constants
            </summary>
        </member>
        <member name="F:PrintingHouse.Infrastructure.Constants.DataConstants.Employee.MaxFirstNameLenght">
            <summary>
            First name maximum lenght
            </summary>
        </member>
        <member name="F:PrintingHouse.Infrastructure.Constants.DataConstants.Employee.MinFirstNameLenght">
            <summary>
            First name minimum lenght
            </summary>
        </member>
        <member name="F:PrintingHouse.Infrastructure.Constants.DataConstants.Employee.MaxLastNameLenght">
            <summary>
            Last name maximum lenght
            </summary>
        </member>
        <member name="F:PrintingHouse.Infrastructure.Constants.DataConstants.Employee.MinLastNameLenght">
            <summary>
            Last name minimum lenght
            </summary>
        </member>
        <member name="T:PrintingHouse.Infrastructure.Data.Common.IRepository">
            <summary>
            Abstraction of repository access methods
            </summary>
        </member>
        <member name="M:PrintingHouse.Infrastructure.Data.Common.IRepository.All``1">
            <summary>
            All records in a table
            </summary>
            <returns>Queryable expression tree</returns>
        </member>
        <member name="M:PrintingHouse.Infrastructure.Data.Common.IRepository.All``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            All records in a table
            </summary>
            <returns>Queryable expression tree</returns>
        </member>
        <member name="M:PrintingHouse.Infrastructure.Data.Common.IRepository.AllReadonly``1">
            <summary>
            The result collection won't be tracked by the context
            </summary>
            <returns>Expression tree</returns>
        </member>
        <member name="M:PrintingHouse.Infrastructure.Data.Common.IRepository.AllReadonly``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            The result collection won't be tracked by the context
            </summary>
            <returns>Expression tree</returns>
        </member>
        <member name="M:PrintingHouse.Infrastructure.Data.Common.IRepository.GetByIdAsync``1(System.Object)">
            <summary>
            Gets specific record from database by primary key
            </summary>
            <param name="id">record identificator</param>
            <returns>Single record</returns>
        </member>
        <member name="M:PrintingHouse.Infrastructure.Data.Common.IRepository.AddAsync``1(``0)">
            <summary>
            Adds entity to the database
            </summary>
            <param name="entity">Entity to add</param>
        </member>
        <member name="M:PrintingHouse.Infrastructure.Data.Common.IRepository.AddRangeAsync``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Ads collection of entities to the database
            </summary>
            <param name="entities">Enumerable list of entities</param>
        </member>
        <member name="M:PrintingHouse.Infrastructure.Data.Common.IRepository.Update``1(``0)">
            <summary>
            Updates a record in database
            </summary>
            <param name="entity">Entity for record to be updated</param>
        </member>
        <member name="M:PrintingHouse.Infrastructure.Data.Common.IRepository.UpdateRange``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Updates set of records in the database
            </summary>
            <param name="entities">Enumerable collection of entities to be updated</param>
        </member>
        <member name="M:PrintingHouse.Infrastructure.Data.Common.IRepository.DeleteAsync``1(System.Object)">
            <summary>
            Deletes a record from database
            </summary>
            <param name="id">Identificator of record to be deleted</param>
        </member>
        <member name="M:PrintingHouse.Infrastructure.Data.Common.IRepository.Delete``1(``0)">
            <summary>
            Deletes a record from database
            </summary>
            <param name="entity">Entity representing record to be deleted</param>
        </member>
        <member name="M:PrintingHouse.Infrastructure.Data.Common.IRepository.Detach``1(``0)">
            <summary>
            Detaches given entity from the context
            </summary>
            <param name="entity">Entity to be detached</param>
        </member>
        <member name="M:PrintingHouse.Infrastructure.Data.Common.IRepository.SaveChangesAsync">
            <summary>
            Saves all made changes in trasaction
            </summary>
            <returns>Error code</returns>
        </member>
        <member name="T:PrintingHouse.Infrastructure.Data.Common.Repository">
            <summary>
            Implementation of repository access methods
            for Relational Database Engine
            </summary>
            <typeparam name="T">Type of the data table to which 
            current reposity is attached</typeparam>
        </member>
        <member name="P:PrintingHouse.Infrastructure.Data.Common.Repository.Context">
            <summary>
            Entity framework DB context holding connection information and properties
            and tracking entity states 
            </summary>
        </member>
        <member name="M:PrintingHouse.Infrastructure.Data.Common.Repository.DbSet``1">
            <summary>
            Representation of table in database
            </summary>
        </member>
        <member name="M:PrintingHouse.Infrastructure.Data.Common.Repository.AddAsync``1(``0)">
            <summary>
            Adds entity to the database
            </summary>
            <param name="entity">Entity to add</param>
        </member>
        <member name="M:PrintingHouse.Infrastructure.Data.Common.Repository.AddRangeAsync``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Ads collection of entities to the database
            </summary>
            <param name="entities">Enumerable list of entities</param>
        </member>
        <member name="M:PrintingHouse.Infrastructure.Data.Common.Repository.All``1">
            <summary>
            All records in a table
            </summary>
            <returns>Queryable expression tree</returns>
        </member>
        <member name="M:PrintingHouse.Infrastructure.Data.Common.Repository.AllReadonly``1">
            <summary>
            The result collection won't be tracked by the context
            </summary>
            <returns>Expression tree</returns>
        </member>
        <member name="M:PrintingHouse.Infrastructure.Data.Common.Repository.DeleteAsync``1(System.Object)">
            <summary>
            Deletes a record from database
            </summary>
            <param name="id">Identificator of record to be deleted</param>
        </member>
        <member name="M:PrintingHouse.Infrastructure.Data.Common.Repository.Delete``1(``0)">
            <summary>
            Deletes a record from database
            </summary>
            <param name="entity">Entity representing record to be deleted</param>
        </member>
        <member name="M:PrintingHouse.Infrastructure.Data.Common.Repository.Detach``1(``0)">
            <summary>
            Detaches given entity from the context
            </summary>
            <param name="entity">Entity to be detached</param>
        </member>
        <member name="M:PrintingHouse.Infrastructure.Data.Common.Repository.Dispose">
            <summary>
            Disposing the context when it is not neede
            Don't have to call this method explicitely
            Leave it to the IoC container
            </summary>
        </member>
        <member name="M:PrintingHouse.Infrastructure.Data.Common.Repository.GetByIdAsync``1(System.Object)">
            <summary>
            Gets specific record from database by primary key
            </summary>
            <param name="id">record identificator</param>
            <returns>Single record</returns>
        </member>
        <member name="M:PrintingHouse.Infrastructure.Data.Common.Repository.SaveChangesAsync">
            <summary>
            Saves all made changes in trasaction
            </summary>
            <returns>Error code</returns>
        </member>
        <member name="M:PrintingHouse.Infrastructure.Data.Common.Repository.Update``1(``0)">
            <summary>
            Updates a record in database
            </summary>
            <param name="entity">Entity for record to be updated</param>
        </member>
        <member name="M:PrintingHouse.Infrastructure.Data.Common.Repository.UpdateRange``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Updates set of records in the database
            </summary>
            <param name="entities">Enumerable collection of entities to be updated</param>
        </member>
        <member name="M:PrintingHouse.Infrastructure.Data.Common.Repository.DeleteRange``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Remove set of records from the database
            </summary>
            <typeparam name="T">Generic parameter of type class</typeparam>
            <param name="entities">Enumerable collection of entities to be removed</param>
        </member>
        <member name="M:PrintingHouse.Infrastructure.Data.Common.Repository.DeleteRange``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Remove set of records from the database with Where clause
            </summary>
            <typeparam name="T">Generic parameter of type class</typeparam>
            <param name="deleteWhereClause">Delegate function as lambda expression to filter result</param>
        </member>
        <member name="T:PrintingHouse.Infrastructure.Data.Entities.Employee">
            <summary>
            Extention of identity user
            </summary>
        </member>
        <member name="T:PrintingHouse.Infrastructure.Data.Entities.Enums.ConsumableType">
            <summary>
            Enumeration of consumables
            </summary>
        </member>
        <member name="T:PrintingHouse.Infrastructure.Data.Entities.Enums.MachineStatus">
            <summary>
            Machine status enumeration 
            </summary>
        </member>
        <member name="T:PrintingHouse.Infrastructure.Data.Entities.Enums.MaterialType">
            <summary>
            Type of printing material enumeration.
            </summary>
        </member>
        <member name="T:PrintingHouse.Infrastructure.Data.Entities.Enums.MeasureUnit">
            <summary>
            Enumeration of printing materials measure units
            </summary>
        </member>
        <member name="T:PrintingHouse.Infrastructure.Data.Entities.Enums.Status">
            <summary>
            Order Status enumeration
            </summary>
        </member>
        <member name="T:PrintingHouse.Infrastructure.Data.PrintingHouseDbContext">
            <summary>
            Application database context
            </summary>
        </member>
    </members>
</doc>
