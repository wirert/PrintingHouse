// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PrintingHouse.Infrastructure.Data;

#nullable disable

namespace PrintingHouse.Infrastructure.Migrations
{
    [DbContext(typeof(PrintingHouseDbContext))]
    [Migration("20230721173609_ArticleImageNameMaxLengthChanged")]
    partial class ArticleImageNameMaxLengthChanged
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PrintingHouse.Infrastructure.Data.Entities.Account.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Employee first name");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasComment("Is active employee (soft delete property)");

                    b.Property<string>("LastName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Employee last name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PictureName")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("Picture name of the user (nullable)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasComment("Extention of identity user");

                    b.HasData(
                        new
                        {
                            Id = new Guid("41e4eae1-eaac-4e34-bdf3-a6c19549dcdd"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1b82a539-a96b-4030-b42b-b0264247c920",
                            Email = "admin@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            IsActive = false,
                            LastName = "Petrov",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@MAIL.COM",
                            NormalizedUserName = "ADMIN123",
                            PasswordHash = "AQAAAAEAACcQAAAAEN7fveRKYeU5Bj060qr37gkHyW0ZWOuo2PtVHyO0RuplDGJGY1md++T6utIAkR2tFg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d2ecdcca-b1e6-4015-aaa1-17c22a17e6b3",
                            TwoFactorEnabled = false,
                            UserName = "Admin123"
                        },
                        new
                        {
                            Id = new Guid("e7065dbb-0c70-48da-902c-9f6f2536c505"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ffeffa2a-e816-452f-9e6b-bc66c870db65",
                            Email = "merchant1@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Merchant",
                            IsActive = false,
                            LastName = "Georgiev",
                            LockoutEnabled = false,
                            NormalizedEmail = "MERCHANT1@MAIL.COM",
                            NormalizedUserName = "MERCHANT1",
                            PasswordHash = "AQAAAAEAACcQAAAAEPSdy6t04zKeBoXdrIp0Ncuvc2vQEDlBIDwuQjzoKx7ff6cf005fThYf0y3G3NJ1Jg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ff91b260-0ab1-48c3-b7dd-ecb740dfce74",
                            TwoFactorEnabled = false,
                            UserName = "Merchant1"
                        },
                        new
                        {
                            Id = new Guid("6afbf121-61d4-42ca-a9c1-5ac694442d83"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "740a311d-1b92-4026-9552-b00755c4e2ce",
                            Email = "empl1@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Empl",
                            IsActive = false,
                            LastName = "Nikolov",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMPL1@MAIL.COM",
                            NormalizedUserName = "EMPLOYEE1",
                            PasswordHash = "AQAAAAEAACcQAAAAEAqU3O5VwOvNQOOzZrbJlx1tUbx9bJRJ31V3Kqw7iRHE/bzDbkShv7pm82y8CXcNow==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "455036d5-b858-4330-83bb-d9bbe1e7d7a0",
                            TwoFactorEnabled = false,
                            UserName = "Employee1"
                        });
                });

            modelBuilder.Entity("PrintingHouse.Infrastructure.Data.Entities.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Article primary key.");

                    b.Property<string>("ArticleNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Article custom number");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasComment("Article owner id");

                    b.Property<int>("ColorModelId")
                        .HasColumnType("int")
                        .HasComment("Foreign key to MaterialColorModel table");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Name of design image");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasComment("Soft delete boolean property");

                    b.Property<double>("Length")
                        .HasColumnType("float")
                        .HasComment("Article length");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int")
                        .HasComment("Foreign key to MaterialColorModel table");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("Article name.");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("MaterialId", "ColorModelId");

                    b.ToTable("Articles");

                    b.HasComment("Particular client article ready for print.");
                });

            modelBuilder.Entity("PrintingHouse.Infrastructure.Data.Entities.ArticleColor", b =>
                {
                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Article id");

                    b.Property<int>("ColorId")
                        .HasColumnType("int")
                        .HasComment("Color id");

                    b.Property<double>("ColorQuantity")
                        .HasColumnType("float")
                        .HasComment("Required color quantity for single print of article");

                    b.HasKey("ArticleId", "ColorId");

                    b.HasIndex("ColorId");

                    b.ToTable("ArticleColors");

                    b.HasComment("Article color with required quantity");
                });

            modelBuilder.Entity("PrintingHouse.Infrastructure.Data.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Client primary key");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasComment("Client e-mail");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasComment("Soft delete propery");

                    b.Property<int>("MerchantId")
                        .HasColumnType("int")
                        .HasComment("Client's merchant id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("Client name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Client phone number");

                    b.HasKey("Id");

                    b.HasIndex("MerchantId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Clients");

                    b.HasComment("Printing house client");
                });

            modelBuilder.Entity("PrintingHouse.Infrastructure.Data.Entities.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Color primary key");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ColorModelId")
                        .HasColumnType("int")
                        .HasComment("Color's color model id");

                    b.Property<int>("InStock")
                        .HasColumnType("int")
                        .HasComment("Color current quantit in stock");

                    b.Property<decimal>("Price")
                        .HasColumnType("money")
                        .HasComment("Color price");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Color type name");

                    b.HasKey("Id");

                    b.HasIndex("ColorModelId");

                    b.ToTable("Color");

                    b.HasComment("Color");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ColorModelId = 1,
                            InStock = 104,
                            Price = 50m,
                            Type = "Red"
                        },
                        new
                        {
                            Id = 2,
                            ColorModelId = 1,
                            InStock = 92,
                            Price = 48m,
                            Type = "Green"
                        },
                        new
                        {
                            Id = 3,
                            ColorModelId = 1,
                            InStock = 67,
                            Price = 57m,
                            Type = "Blue"
                        },
                        new
                        {
                            Id = 4,
                            ColorModelId = 2,
                            InStock = 47,
                            Price = 52m,
                            Type = "Cyan"
                        },
                        new
                        {
                            Id = 5,
                            ColorModelId = 2,
                            InStock = 38,
                            Price = 55m,
                            Type = "Magenta"
                        },
                        new
                        {
                            Id = 6,
                            ColorModelId = 2,
                            InStock = 50,
                            Price = 47m,
                            Type = "Yellow"
                        },
                        new
                        {
                            Id = 7,
                            ColorModelId = 2,
                            InStock = 60,
                            Price = 40m,
                            Type = "Black"
                        });
                });

            modelBuilder.Entity("PrintingHouse.Infrastructure.Data.Entities.ColorModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary key");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Color model name");

                    b.HasKey("Id");

                    b.ToTable("ColorModel");

                    b.HasComment("Printing color model");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "RGB"
                        },
                        new
                        {
                            Id = 2,
                            Name = "CMYK"
                        });
                });

            modelBuilder.Entity("PrintingHouse.Infrastructure.Data.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary key");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Employee application user id");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasComment("Soft delete property");

                    b.Property<int>("PositionId")
                        .HasColumnType("int")
                        .HasComment("Employee office position id");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.HasIndex("PositionId");

                    b.ToTable("Employees");

                    b.HasComment("Employee entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = new Guid("41e4eae1-eaac-4e34-bdf3-a6c19549dcdd"),
                            IsActive = true,
                            PositionId = 1
                        });
                });

            modelBuilder.Entity("PrintingHouse.Infrastructure.Data.Entities.Machine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary key");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ColorModelId")
                        .HasColumnType("int")
                        .HasComment("Foreign key to MaterialColorModel table");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int")
                        .HasComment("Foreign key to MaterialColorModel table");

                    b.Property<double>("MaterialPerPrint")
                        .HasColumnType("float")
                        .HasComment("Material required for single print");

                    b.Property<string>("Model")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasComment("Printing machine model (optional)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Printing machine name");

                    b.Property<TimeSpan>("PrintTime")
                        .HasColumnType("time")
                        .HasComment("Machine printing time for single unit");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasComment("Current status of the machine (has default value)");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId", "ColorModelId");

                    b.ToTable("Machines");

                    b.HasComment("Printing machine");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ColorModelId = 2,
                            MaterialId = 2,
                            MaterialPerPrint = 5.0,
                            Name = "Machine 1",
                            PrintTime = new TimeSpan(0, 0, 3, 0, 0),
                            Status = 0
                        },
                        new
                        {
                            Id = 2,
                            ColorModelId = 2,
                            MaterialId = 2,
                            MaterialPerPrint = 5.0,
                            Name = "Machine 2",
                            PrintTime = new TimeSpan(0, 0, 2, 30, 0),
                            Status = 0
                        },
                        new
                        {
                            Id = 3,
                            ColorModelId = 1,
                            MaterialId = 1,
                            MaterialPerPrint = 1.0,
                            Name = "Machine 3",
                            PrintTime = new TimeSpan(0, 0, 0, 3, 0),
                            Status = 0
                        },
                        new
                        {
                            Id = 4,
                            ColorModelId = 2,
                            MaterialId = 3,
                            MaterialPerPrint = 1.0,
                            Name = "Machine 4",
                            PrintTime = new TimeSpan(0, 0, 40, 0, 0),
                            Status = 0
                        });
                });

            modelBuilder.Entity("PrintingHouse.Infrastructure.Data.Entities.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary key");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("InStock")
                        .HasColumnType("int")
                        .HasComment("Material current quantit in stock");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasComment("Soft delete property");

                    b.Property<double>("Lenght")
                        .HasColumnType("float")
                        .HasComment("Material lenght");

                    b.Property<int>("MeasureUnit")
                        .HasColumnType("int")
                        .HasComment("Material measure unit (enumeration)");

                    b.Property<decimal>("Price")
                        .HasColumnType("money")
                        .HasComment("Material price");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Material type name");

                    b.Property<double>("Width")
                        .HasColumnType("float")
                        .HasComment("Material width");

                    b.HasKey("Id");

                    b.ToTable("Materials");

                    b.HasComment("Мaterial on which it is printed");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            InStock = 10000,
                            IsActive = true,
                            Lenght = 594.0,
                            MeasureUnit = 1,
                            Price = 1m,
                            Type = "Plain paper A2",
                            Width = 420.0
                        },
                        new
                        {
                            Id = 2,
                            InStock = 100,
                            IsActive = true,
                            Lenght = 0.01,
                            MeasureUnit = 0,
                            Price = 1500.50m,
                            Type = "Vinil 2m",
                            Width = 0.002
                        },
                        new
                        {
                            Id = 3,
                            InStock = 20,
                            IsActive = true,
                            Lenght = 1.0,
                            MeasureUnit = 0,
                            Price = 850m,
                            Type = "Nylon 20cm",
                            Width = 0.00020000000000000001
                        });
                });

            modelBuilder.Entity("PrintingHouse.Infrastructure.Data.Entities.MaterialColorModel", b =>
                {
                    b.Property<int>("MaterialId")
                        .HasColumnType("int")
                        .HasComment("Material id (primary key)");

                    b.Property<int>("ColorModelId")
                        .HasColumnType("int")
                        .HasComment("Color model id (primary key)");

                    b.HasKey("MaterialId", "ColorModelId");

                    b.HasIndex("ColorModelId");

                    b.ToTable("MaterialsColorModels");

                    b.HasComment("Machine material and color model connecting table with article colors");

                    b.HasData(
                        new
                        {
                            MaterialId = 1,
                            ColorModelId = 1
                        },
                        new
                        {
                            MaterialId = 2,
                            ColorModelId = 2
                        },
                        new
                        {
                            MaterialId = 3,
                            ColorModelId = 2
                        });
                });

            modelBuilder.Entity("PrintingHouse.Infrastructure.Data.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Order primary key");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Order article id");

                    b.Property<string>("Comment")
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)")
                        .HasComment("Additional information about the order.");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2")
                        .HasComment("Order deadline date if required from the client");

                    b.Property<DateTime>("ExpectedPrintDate")
                        .HasColumnType("datetime2")
                        .HasComment("Order expected print date");

                    b.Property<TimeSpan>("ExpectedPrintTime")
                        .HasColumnType("time")
                        .HasComment("Expected time needed for printing");

                    b.Property<int?>("MachineId")
                        .HasColumnType("int")
                        .HasComment("Expected printing machine Id for the order");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("datetime2")
                        .HasComment("DateTime of order creation");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("Order article quantity");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("Order current status");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("MachineId");

                    b.ToTable("Orders");

                    b.HasComment("Order from client for print");
                });

            modelBuilder.Entity("PrintingHouse.Infrastructure.Data.Entities.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary key");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("Soft delete property");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Position name");

                    b.HasKey("Id");

                    b.ToTable("Positions");

                    b.HasComment("Office position");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = 2,
                            IsActive = true,
                            Name = "Merchant"
                        },
                        new
                        {
                            Id = 3,
                            IsActive = true,
                            Name = "Employee"
                        },
                        new
                        {
                            Id = 4,
                            IsActive = true,
                            Name = "Designer"
                        },
                        new
                        {
                            Id = 5,
                            IsActive = true,
                            Name = "Manager"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("PrintingHouse.Infrastructure.Data.Entities.Account.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("PrintingHouse.Infrastructure.Data.Entities.Account.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrintingHouse.Infrastructure.Data.Entities.Account.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("PrintingHouse.Infrastructure.Data.Entities.Account.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PrintingHouse.Infrastructure.Data.Entities.Article", b =>
                {
                    b.HasOne("PrintingHouse.Infrastructure.Data.Entities.Client", "Client")
                        .WithMany("Articles")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrintingHouse.Infrastructure.Data.Entities.MaterialColorModel", "MaterialColorModel")
                        .WithMany("Articles")
                        .HasForeignKey("MaterialId", "ColorModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("MaterialColorModel");
                });

            modelBuilder.Entity("PrintingHouse.Infrastructure.Data.Entities.ArticleColor", b =>
                {
                    b.HasOne("PrintingHouse.Infrastructure.Data.Entities.Article", "Article")
                        .WithMany("ArticleColors")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrintingHouse.Infrastructure.Data.Entities.Color", "Color")
                        .WithMany("ArticlesColors")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Color");
                });

            modelBuilder.Entity("PrintingHouse.Infrastructure.Data.Entities.Client", b =>
                {
                    b.HasOne("PrintingHouse.Infrastructure.Data.Entities.Employee", "Merchant")
                        .WithMany("Clients")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("PrintingHouse.Infrastructure.Data.Entities.Color", b =>
                {
                    b.HasOne("PrintingHouse.Infrastructure.Data.Entities.ColorModel", "ColorModel")
                        .WithMany("Colors")
                        .HasForeignKey("ColorModelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ColorModel");
                });

            modelBuilder.Entity("PrintingHouse.Infrastructure.Data.Entities.Employee", b =>
                {
                    b.HasOne("PrintingHouse.Infrastructure.Data.Entities.Account.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrintingHouse.Infrastructure.Data.Entities.Position", "Position")
                        .WithMany("Employees")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("PrintingHouse.Infrastructure.Data.Entities.Machine", b =>
                {
                    b.HasOne("PrintingHouse.Infrastructure.Data.Entities.MaterialColorModel", "MaterialColorModel")
                        .WithMany("Machines")
                        .HasForeignKey("MaterialId", "ColorModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaterialColorModel");
                });

            modelBuilder.Entity("PrintingHouse.Infrastructure.Data.Entities.MaterialColorModel", b =>
                {
                    b.HasOne("PrintingHouse.Infrastructure.Data.Entities.ColorModel", "ColorModel")
                        .WithMany("MaterialsColorModel")
                        .HasForeignKey("ColorModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrintingHouse.Infrastructure.Data.Entities.Material", "Material")
                        .WithMany("MaterialColorModels")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ColorModel");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("PrintingHouse.Infrastructure.Data.Entities.Order", b =>
                {
                    b.HasOne("PrintingHouse.Infrastructure.Data.Entities.Article", "Article")
                        .WithMany("Orders")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrintingHouse.Infrastructure.Data.Entities.Machine", "Machine")
                        .WithMany("OrdersQueue")
                        .HasForeignKey("MachineId");

                    b.Navigation("Article");

                    b.Navigation("Machine");
                });

            modelBuilder.Entity("PrintingHouse.Infrastructure.Data.Entities.Article", b =>
                {
                    b.Navigation("ArticleColors");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("PrintingHouse.Infrastructure.Data.Entities.Client", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("PrintingHouse.Infrastructure.Data.Entities.Color", b =>
                {
                    b.Navigation("ArticlesColors");
                });

            modelBuilder.Entity("PrintingHouse.Infrastructure.Data.Entities.ColorModel", b =>
                {
                    b.Navigation("Colors");

                    b.Navigation("MaterialsColorModel");
                });

            modelBuilder.Entity("PrintingHouse.Infrastructure.Data.Entities.Employee", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("PrintingHouse.Infrastructure.Data.Entities.Machine", b =>
                {
                    b.Navigation("OrdersQueue");
                });

            modelBuilder.Entity("PrintingHouse.Infrastructure.Data.Entities.Material", b =>
                {
                    b.Navigation("MaterialColorModels");
                });

            modelBuilder.Entity("PrintingHouse.Infrastructure.Data.Entities.MaterialColorModel", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Machines");
                });

            modelBuilder.Entity("PrintingHouse.Infrastructure.Data.Entities.Position", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
