<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PrintingHouse.Core</name>
    </assembly>
    <members>
        <member name="F:PrintingHouse.Core.Constants.ModelConstants.Article_Piece_Length">
            <summary>
            Conversion constant for article with measure unit Piece 
            </summary>
        </member>
        <member name="T:PrintingHouse.Core.Constants.ModelConstants.ApplicationUser">
            <summary>
            Application user error messages
            </summary>
        </member>
        <member name="T:PrintingHouse.Core.Models.Account.LoginViewModel">
            <summary>
            Login view model
            </summary>
        </member>
        <member name="P:PrintingHouse.Core.Models.Account.LoginViewModel.UserName">
            <summary>
            Employee login username 
            </summary>
        </member>
        <member name="P:PrintingHouse.Core.Models.Account.LoginViewModel.Password">
            <summary>
            Employee login password
            </summary>
        </member>
        <member name="P:PrintingHouse.Core.Models.Account.LoginViewModel.ReturnUrl">
            <summary>
            Return URL, when there is redirection to login page from another page which requre login
            </summary>
        </member>
        <member name="P:PrintingHouse.Core.Models.Account.LoginViewModel.IsPersistent">
            <summary>
            Check box value on page
            </summary>
        </member>
        <member name="T:PrintingHouse.Core.Models.Account.RegisterViewModel">
            <summary>
            Register new employee view model
            </summary>
        </member>
        <member name="P:PrintingHouse.Core.Models.Account.RegisterViewModel.UserName">
            <summary>
            Employee Username for login
            </summary>
        </member>
        <member name="P:PrintingHouse.Core.Models.Account.RegisterViewModel.Email">
            <summary>
            Employee Email
            </summary>
        </member>
        <member name="P:PrintingHouse.Core.Models.Account.RegisterViewModel.Password">
            <summary>
            Employee password
            </summary>
        </member>
        <member name="P:PrintingHouse.Core.Models.Account.RegisterViewModel.PasswordRepeat">
            <summary>
            Employee confurm password
            </summary>
        </member>
        <member name="P:PrintingHouse.Core.Models.Account.RegisterViewModel.FirstName">
            <summary>
            Employee first name
            </summary>
        </member>
        <member name="P:PrintingHouse.Core.Models.Account.RegisterViewModel.LastName">
            <summary>
            Employee last name
            </summary>
        </member>
        <member name="P:PrintingHouse.Core.Models.Account.RegisterViewModel.PhoneNumber">
            <summary>
            Employee phone number
            </summary>
        </member>
        <member name="T:PrintingHouse.Core.Services.Admin.EmployeeService">
            <summary>
            Employee service
            </summary>
        </member>
        <member name="M:PrintingHouse.Core.Services.Admin.EmployeeService.AddAsync(PrintingHouse.Core.AdminModels.Employee.AddEmployeeViewModel)">
            <summary>
            Create new employee
            </summary>
            <param name="model">Add employee view model with form data</param>
        </member>
        <member name="M:PrintingHouse.Core.Services.Admin.EmployeeService.DeleteAsync(System.Int32)">
            <summary>
            Soft delete employee
            </summary>
            <param name="id">employee identifier</param>
        </member>
        <member name="M:PrintingHouse.Core.Services.Admin.EmployeeService.ChnagePositionAsync(PrintingHouse.Core.AdminModels.Employee.EditEmployeeViewModel)">
            <summary>
            Change working position of na employee
            </summary>
            <param name="model">Edit employee view model</param>
        </member>
        <member name="M:PrintingHouse.Core.Services.Admin.EmployeeService.GetAllAsync">
            <summary>
            Gets all active employees
            </summary>
            <returns>Enumeration with Employee view model</returns>
        </member>
        <member name="M:PrintingHouse.Core.Services.Admin.EmployeeService.GetByIdAsync(System.Int32)">
            <summary>
            Get active employee by id
            </summary>
            <param name="id">employee id</param>
            <returns>Edit employee view model or null</returns>
        </member>
        <member name="M:PrintingHouse.Core.Services.Admin.EmployeeService.GetIdByUserIdAsync(System.Guid)">
            <summary>
            Get employee Id by application user id. May Throw exception from FirstAsync() method
            </summary>
            <param name="userId">user id (guid)</param>
            <returns>employee id</returns>
        </member>
        <member name="M:PrintingHouse.Core.Services.Admin.EmployeeService.GetAllNewEmployees">
            <summary>
            Get all registered application users who are not employees yet
            </summary>
            <returns>Enumeration of All user view model</returns>
        </member>
        <member name="T:PrintingHouse.Core.Services.Admin.PositionService">
            <summary>
            Position service
            </summary>
        </member>
        <member name="M:PrintingHouse.Core.Services.Admin.PositionService.AddNewAsync(PrintingHouse.Core.AdminModels.Position.AddPositionViewModel)">
            <summary>
            Create new position or restore if non active
            </summary>
            <param name="viewModel">Add position view model</param>
        </member>
        <member name="M:PrintingHouse.Core.Services.Admin.PositionService.DeleteAsync(System.Int32)">
            <summary>
            Soft delete position
            </summary>
            <param name="positionId">Positon id</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Throw if there are workers on this position</exception>
        </member>
        <member name="M:PrintingHouse.Core.Services.Admin.PositionService.GetAllAsync">
            <summary>
            Get all active positions available
            </summary>
            <returns>Enumeration of Position view model</returns>
        </member>
        <member name="T:PrintingHouse.Core.Services.ArticleService">
            <summary>
            Article service
            </summary>
        </member>
        <member name="M:PrintingHouse.Core.Services.ArticleService.GetAllAsync(System.Nullable{System.Guid})">
            <summary>
            Get all articles or all articles of certain client by client id
            </summary>
            <param name="id">client id (nullable)</param>
            <returns>Enumeration of All article view model</returns>
        </member>
        <member name="M:PrintingHouse.Core.Services.ArticleService.CreateAsync(PrintingHouse.Core.Models.Article.ArticleViewModel)">
            <summary>
            Creates new article
            </summary>
            <param name="model">Article view model</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:PrintingHouse.Core.Services.ArticleService.GetSelectVeiwModelWithDataAsync(System.Guid,System.Nullable{System.Guid})">
            <summary>
            Fill data for select material and color model view model
            </summary>        
            <param name="clientId"></param>
            <param name="articleId"></param>
            <returns>Choose article material and color model view model</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:PrintingHouse.Core.Services.ArticleService.ExistByIdAsync(System.Nullable{System.Guid})">
            <summary>
            Check existence of article by id and is it active
            </summary>
            <param name="id">article id</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:PrintingHouse.Core.Services.ArticleService.EditAsync(PrintingHouse.Core.Models.Article.ArticleViewModel)">
            <summary>
            Edit existing article
            </summary>
            <param name="model">Article view model with data changes</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:PrintingHouse.Core.Services.ArticleService.DeleteByIdAsync(System.Guid)">
            <summary>
            Soft delete article
            </summary>
            <param name="id">Article id</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:PrintingHouse.Core.Services.ArticleService.GetFileNameByIdAsync(System.Guid)">
            <summary>
            Get design name by article id
            </summary>
            <param name="id">Article identifier</param>
            <returns>Design name</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:PrintingHouse.Core.Services.ArticleService.GetCreateViewModelWithData(System.Int32,System.Int32,System.Guid,System.String)">
            <summary>
            Creates view model for creating a new article and fill it with needed data
            </summary>
            <param name="materialId"></param>
            <param name="colorModelId"></param>
            <param name="clientId"></param>
            <param name="clientName"></param>
            <returns>Article view model</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:PrintingHouse.Core.Services.ArticleService.GetEditViewModelWithData(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Guid)">
            <summary>
            Finds an article from db and create view model for update
            </summary>
            <param name="materialId"></param>
            <param name="colorModelId"></param>
            <param name="articleId"></param>
            <returns>Article view model</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:PrintingHouse.Core.Services.ClientService">
            <summary>
            Client service
            </summary>
        </member>
        <member name="M:PrintingHouse.Core.Services.ClientService.AddNewAsync(PrintingHouse.Core.Models.Client.AddClientViewModel,System.Guid)">
            <summary>
            Create new client or restore and update deleted
            </summary>
            <param name="model">Add client view model with data from form</param>        
            <param name="userId">current user id</param>
            <returns></returns>
            <exception cref="T:PrintingHouse.Core.Exceptions.ClientNameExistsException"></exception>
        </member>
        <member name="M:PrintingHouse.Core.Services.ClientService.GetAllAsync">
            <summary>
            Gets all active clients
            </summary>
            <returns>Enumeration of All client view model</returns>
        </member>
        <member name="T:PrintingHouse.Core.Services.ColorModelService">
            <summary>
            Color model service
            </summary>
        </member>
        <member name="M:PrintingHouse.Core.Services.ColorModelService.GetColorModelByMaterialIdAsync(System.String)">
            <summary>
            Get Color models for particular Material
            </summary>
            <param name="materialId">material identifier</param>
            <returns>Collection of Color model view model</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:PrintingHouse.Core.Services.ColorModelService.GetColorModelColorsAsync(System.Int32)">
            <summary>
            Gets the colors list of particular color model by id
            </summary>
            <param name="colorModelId">Color model identifier</param>
            <returns>List of color View model</returns>
        </member>
        <member name="T:PrintingHouse.Core.Services.Contracts.IArticleService">
            <summary>
            Article service interface for IoC
            </summary>
        </member>
        <member name="M:PrintingHouse.Core.Services.Contracts.IArticleService.GetAllAsync(System.Nullable{System.Guid})">
            <summary>
            Get all articles or all articles of certain client by client id
            </summary>
            <param name="id">client id (nullable)</param>
            <returns>Enumeration of All article view model</returns>
        </member>
        <member name="M:PrintingHouse.Core.Services.Contracts.IArticleService.CreateAsync(PrintingHouse.Core.Models.Article.ArticleViewModel)">
            <summary>
            Creates new article
            </summary>
            <param name="model">Article view model</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:PrintingHouse.Core.Services.Contracts.IArticleService.GetCreateViewModelWithData(System.Int32,System.Int32,System.Guid,System.String)">
            <summary>
            Creates view model for creating a new article and fill it with needed data
            </summary>
            <param name="materialId"></param>
            <param name="colorModelId"></param>
            <param name="clientId"></param>
            <param name="clientName"></param>
            <returns>Article view model</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:PrintingHouse.Core.Services.Contracts.IArticleService.GetEditViewModelWithData(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Guid)">
            <summary>
            Finds an article from db and create view model for update
            </summary>
            <param name="materialId"></param>
            <param name="colorModelId"></param>
            <param name="articleId"></param>
            <returns>Article view model</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:PrintingHouse.Core.Services.Contracts.IArticleService.GetSelectVeiwModelWithDataAsync(System.Guid,System.Nullable{System.Guid})">
            <summary>
            Fill data for select material and color model view model
            </summary>        
            <param name="clientId"></param>
            <param name="articleId"></param>
            <returns>Choose article material and color model view model</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:PrintingHouse.Core.Services.Contracts.IArticleService.ExistByIdAsync(System.Nullable{System.Guid})">
            <summary>
            Check existence of article by id and is it active
            </summary>
            <param name="id">article id</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:PrintingHouse.Core.Services.Contracts.IArticleService.EditAsync(PrintingHouse.Core.Models.Article.ArticleViewModel)">
            <summary>
            Edit existing article
            </summary>
            <param name="model">Article view model with data changes</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">thrown when Article is null or IsActive is false, or ClientId is different</exception>
        </member>
        <member name="M:PrintingHouse.Core.Services.Contracts.IArticleService.DeleteByIdAsync(System.Guid)">
            <summary>
            Soft delete article
            </summary>
            <param name="id">Article id</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:PrintingHouse.Core.Services.Contracts.IArticleService.GetFileNameByIdAsync(System.Guid)">
            <summary>
            Get design name by article id
            </summary>
            <param name="id">Article identifier</param>
            <returns>Design name</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:PrintingHouse.Core.Services.Contracts.IClientService">
            <summary>
            Client service interface for IoC
            </summary>
        </member>
        <member name="M:PrintingHouse.Core.Services.Contracts.IClientService.AddNewAsync(PrintingHouse.Core.Models.Client.AddClientViewModel,System.Guid)">
            <summary>
            Create new client or restore and update deleted
            </summary>
            <param name="model">Add client view model with data from form</param>        
            <param name="userId">current user id</param>
            <returns></returns>
            <exception cref="T:PrintingHouse.Core.Exceptions.ClientNameExistsException"></exception>
        </member>
        <member name="M:PrintingHouse.Core.Services.Contracts.IClientService.GetAllAsync">
            <summary>
            Gets all active clients
            </summary>
            <returns>Enumeration of All client view model</returns>
        </member>
        <member name="T:PrintingHouse.Core.Services.Contracts.IColorModelService">
            <summary>
            Color model service interface for IoC
            </summary>
        </member>
        <member name="M:PrintingHouse.Core.Services.Contracts.IColorModelService.GetColorModelColorsAsync(System.Int32)">
            <summary>
            Gets the colors list of particular color model by id
            </summary>
            <param name="colorModelId">Color model identifier</param>
            <returns>List of color View model</returns>
        </member>
        <member name="M:PrintingHouse.Core.Services.Contracts.IColorModelService.GetColorModelByMaterialIdAsync(System.String)">
            <summary>
            Get Color models for particular Material
            </summary>
            <param name="materialId">material identifier</param>
            <returns>Collection of Color model view model</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:PrintingHouse.Core.Services.Contracts.IEmployeeService">
            <summary>
            Employee service interface for IoC
            </summary>
        </member>
        <member name="M:PrintingHouse.Core.Services.Contracts.IEmployeeService.AddAsync(PrintingHouse.Core.AdminModels.Employee.AddEmployeeViewModel)">
            <summary>
            Create new employee
            </summary>
            <param name="model">Add employee view model with form data</param>
        </member>
        <member name="M:PrintingHouse.Core.Services.Contracts.IEmployeeService.GetAllAsync">
            <summary>
            Gets all active employees
            </summary>
            <returns>Enumeration with Employee view model</returns>
        </member>
        <member name="M:PrintingHouse.Core.Services.Contracts.IEmployeeService.GetByIdAsync(System.Int32)">
            <summary>
            Get active employee by id
            </summary>
            <param name="id">employee id</param>
            <returns>Edit employee view model or null</returns>
        </member>
        <member name="M:PrintingHouse.Core.Services.Contracts.IEmployeeService.ChnagePositionAsync(PrintingHouse.Core.AdminModels.Employee.EditEmployeeViewModel)">
            <summary>
            Change working position of na employee
            </summary>
            <param name="model">Edit employee view model</param>
        </member>
        <member name="M:PrintingHouse.Core.Services.Contracts.IEmployeeService.DeleteAsync(System.Int32)">
            <summary>
            Soft delete employee
            </summary>
            <param name="id">employee identifier</param>
        </member>
        <member name="M:PrintingHouse.Core.Services.Contracts.IEmployeeService.GetIdByUserIdAsync(System.Guid)">
            <summary>
            Get employee Id by application user id. May Throw exception from FirstAsync() method
            </summary>
            <param name="userId">user id (guid)</param>
            <returns>employee id</returns>
        </member>
        <member name="M:PrintingHouse.Core.Services.Contracts.IEmployeeService.GetAllNewEmployees">
            <summary>
            Get all registered application users who are not employees yet
            </summary>
            <returns>Enumeration of All user view model</returns>
        </member>
        <member name="T:PrintingHouse.Core.Services.Contracts.IFileService">
            <summary>
            File service interface for IoC
            </summary>
        </member>
        <member name="M:PrintingHouse.Core.Services.Contracts.IFileService.SaveFileAsync(System.Guid,System.String,Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Save file mothod for object store
            </summary>
            <param name="BucketName">Bucket name</param>
            <param name="fileName">file name</param>
            <param name="content">File content (IFormFile)</param>
            <returns></returns>
        </member>
        <member name="M:PrintingHouse.Core.Services.Contracts.IFileService.GetFileAsync(System.Guid,System.String)">
            <summary>
            Retrieve file from object store by bucket name and file name
            </summary>
            <param name="BucketName">Bucket name</param>
            <param name="fileName">File name</param>
            <returns>Memory stream with file content</returns>
        </member>
        <member name="M:PrintingHouse.Core.Services.Contracts.IMachineService.GetMachinesIdsAsync">
            <summary>
            Gets all machines for select
            </summary>
            <returns>Machine select view model</returns>
        </member>
        <member name="M:PrintingHouse.Core.Services.Contracts.IMachineService.GetMachineOrdersAsync(System.Int32)">
            <summary>
            Gets orders for a particular machine
            </summary>
            <param name="machineId">machine identifier</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:PrintingHouse.Core.Services.Contracts.IMachineService.MoveOrderInFrontAsync(System.Guid)">
            <summary>
            Make order first in queue for printing
            </summary>
            <param name="orderId"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:PrintingHouse.Core.Services.Contracts.IMaterialColorService">
            <summary>
            Material - Color model service interface for IoC
            </summary>
        </member>
        <member name="M:PrintingHouse.Core.Services.Contracts.IMaterialColorService.ExistByIds(System.Int32,System.Int32)">
            <summary>
            Whether exist MaterialColorModel with given material id and color model Id
            </summary>
            <param name="materialId">Material id</param>
            <param name="colorId">ColorModel id</param>
            <returns>Boolean</returns>
        </member>
        <member name="T:PrintingHouse.Core.Services.Contracts.IMaterialService">
            <summary>
            Material service interface for IoC
            </summary>
        </member>
        <member name="M:PrintingHouse.Core.Services.Contracts.IMaterialService.GetMaterialByIdAsync(System.Int32)">
            <summary>
            Get material name by identifier or null if not exist
            </summary>
            <param name="materialId">material identifier</param>
            <returns>material name or null</returns>
        </member>
        <member name="M:PrintingHouse.Core.Services.Contracts.IOrderService.CreateAddModelByArticleIdAsync(System.Guid)">
            <summary>
            Creates a View model for Create a new order for a article
            </summary>
            <param name="articleId">article identifier</param>
            <returns>Add order view model</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:PrintingHouse.Core.Services.Contracts.IOrderService.CreateOrder(PrintingHouse.Core.Models.Order.AddOrderViewModel)">
            <summary>
            Creates new order
            </summary>
            <param name="model">View model</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:PrintingHouse.Core.Exceptions.OrderMachineException"></exception>
        </member>
        <member name="M:PrintingHouse.Core.Services.Contracts.IOrderService.GetAllOrdersAsync">
            <summary>
            Gets all orders
            </summary>
            <returns>Enumeration of Order View model</returns>
        </member>
        <member name="M:PrintingHouse.Core.Services.Contracts.IOrderService.ChangeStatusAsync(System.Guid,PrintingHouse.Infrastructure.Data.Entities.Enums.OrderStatus)">
            <summary>
            Changes status of an order
            </summary>
            <param name="id">Order identifier</param>
            <param name="status">The new Status of order</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:PrintingHouse.Core.Exceptions.StatusException"></exception>
        </member>
        <member name="M:PrintingHouse.Core.Services.Contracts.IOrderService.RearangeAllOrderOfParticularTypeAsync(System.Int32,System.Int32,System.Nullable{System.Guid})">
            <summary>
            Changes expected print time and expected print date of all orders with given material and color model.
            Respectivly may change machine id (if there are more than one with same parameters).
            If passed an order id, it sets it in front of the queue of machines
            </summary>
            <param name="materialId"></param>
            <param name="colorModelId"></param>
            <param name="orderId"></param>
            <returns></returns>
        </member>
        <member name="T:PrintingHouse.Core.Services.Contracts.IPositionService">
            <summary>
            Position service interface for IoC
            </summary>
        </member>
        <member name="M:PrintingHouse.Core.Services.Contracts.IPositionService.GetAllAsync">
            <summary>
            Get all active positions available
            </summary>
            <returns>Enumeration of Position view model</returns>
        </member>
        <member name="M:PrintingHouse.Core.Services.Contracts.IPositionService.AddNewAsync(PrintingHouse.Core.AdminModels.Position.AddPositionViewModel)">
            <summary>
            Create new position or restore if non active
            </summary>
            <param name="viewModel">Add position view model</param>
        </member>
        <member name="M:PrintingHouse.Core.Services.Contracts.IPositionService.DeleteAsync(System.Int32)">
            <summary>
            Soft delete position
            </summary>
            <param name="positionId">Positon id</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Thrown if there are workers on this position</exception>
        </member>
        <member name="T:PrintingHouse.Core.Services.FileService">
            <summary>
            File service
            </summary>
        </member>
        <member name="M:PrintingHouse.Core.Services.FileService.GetFileAsync(System.Guid,System.String)">
            <summary>
            Retrieve file from MinIO object store by bucket name and file name
            </summary>
            <param name="BucketName">Bucket name</param>
            <param name="fileName">File name</param>
            <returns>Memory stream with file content</returns>
        </member>
        <member name="M:PrintingHouse.Core.Services.FileService.SaveFileAsync(System.Guid,System.String,Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Save file mothod for MinIO object store
            </summary>
            <param name="BucketName">Bucket name</param>
            <param name="fileName">file name</param>
            <param name="content">File content (IFormFile)</param>
            <returns></returns>
        </member>
        <member name="M:PrintingHouse.Core.Services.MachineService.GetMachineOrdersAsync(System.Int32)">
            <summary>
            Gets orders for a particular machine
            </summary>
            <param name="machineId">machine identifier</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:PrintingHouse.Core.Services.MachineService.GetMachinesIdsAsync">
            <summary>
            Gets all machines for select
            </summary>
            <returns>Machine select view model</returns>
        </member>
        <member name="M:PrintingHouse.Core.Services.MachineService.MoveOrderInFrontAsync(System.Guid)">
            <summary>
            Make order first in queue for printing
            </summary>
            <param name="orderId"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:PrintingHouse.Core.Services.MaterialColorService">
            <summary>
            Material - Color model service
            </summary>
        </member>
        <member name="M:PrintingHouse.Core.Services.MaterialColorService.ExistByIds(System.Int32,System.Int32)">
            <summary>
            Whether exist MaterialColorModel with given material id and color model Id
            </summary>
            <param name="materialId">Material id</param>
            <param name="colorId">ColorModel id</param>
            <returns>Boolean</returns>
        </member>
        <member name="T:PrintingHouse.Core.Services.MaterialService">
            <summary>
            Material service
            </summary>
        </member>
        <member name="M:PrintingHouse.Core.Services.MaterialService.GetMaterialByIdAsync(System.Int32)">
            <summary>
            Get material name by identifier or null if not exist
            </summary>
            <param name="materialId">material identifier</param>
            <returns>material name or null</returns>
        </member>
        <member name="M:PrintingHouse.Core.Services.OrderService.GetAllOrdersAsync">
            <summary>
            Gets all orders
            </summary>
            <returns>Enumeration of Order View model</returns>
        </member>
        <member name="M:PrintingHouse.Core.Services.OrderService.CreateAddModelByArticleIdAsync(System.Guid)">
            <summary>
            Creates a View model for Create a new order for a article
            </summary>
            <param name="articleId">article identifier</param>
            <returns>Add order view model</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:PrintingHouse.Core.Services.OrderService.CreateOrder(PrintingHouse.Core.Models.Order.AddOrderViewModel)">
            <summary>
            Creates new order
            </summary>
            <param name="model">View model</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:PrintingHouse.Core.Exceptions.OrderMachineException"></exception>
        </member>
        <member name="M:PrintingHouse.Core.Services.OrderService.ChangeStatusAsync(System.Guid,PrintingHouse.Infrastructure.Data.Entities.Enums.OrderStatus)">
            <summary>
            Changes status of an order
            </summary>
            <param name="id">Order identifier</param>
            <param name="status">The new Status of order</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:PrintingHouse.Core.Exceptions.StatusException"></exception>
        </member>
        <member name="M:PrintingHouse.Core.Services.OrderService.RearangeAllOrderOfParticularTypeAsync(System.Int32,System.Int32,System.Nullable{System.Guid})">
            <summary>
            Changes expected print time and expected print date of all orders with given material and color model.
            Respectivly may change machine (if there are more than one with same parameters.
            If passed an order id, it sets it in front of the queue of machines
            </summary>
            <param name="materialId"></param>
            <param name="colorModelId"></param>
            <param name="orderId"></param>
            <returns></returns>
        </member>
        <member name="M:PrintingHouse.Core.Services.OrderService.SetExpectedPrintDate(PrintingHouse.Infrastructure.Data.Entities.Order)">
            <summary>
            Set expected print date according print time and other orders
            </summary>
            <param name="order">The order</param>
        </member>
        <member name="M:PrintingHouse.Core.Services.OrderService.TakeMaterialsAndColorsIfAvailable(PrintingHouse.Infrastructure.Data.Entities.Article,System.Int32)">
            <summary>
            Take needed quantity of material and colors if there is enough in stock
            </summary>
            <param name="article">Order article</param>
            <param name="neededOrderArticleQuantity">Order quantity of articles</param>
            <returns>Whether operation is successfull</returns>
        </member>
    </members>
</doc>
